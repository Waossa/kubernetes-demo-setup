---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
spec:
  selector:
    matchLabels:
      app: hello
      tier: backend
      track: stable
  replicas: 2
  template:
    metadata:
      labels:
        app: hello
        tier: backend
        track: stable
    spec:
      containers:
        - name: hello
          image: "gcr.io/google-samples/hello-go-gke:1.0"
          ports:
            - name: http
              containerPort: 80
---

apiVersion: v1
kind: Service
metadata:
  name: hello
spec:
  selector:
    app: hello
    tier: backend
  ports:
  - protocol: TCP
    port: 80
    targetPort: http
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginxconf
data:
  nginx.conf: |-
    # The identifier Backend is internal to nginx, and used to name this specific upstream
    upstream Backend {
        # hello is the internal DNS name used by the backend Service inside Kubernetes
        server hello;
    }
    server {
    listen 80;
    location / {
        # The following statement will proxy traffic to the upstream named Backend
        proxy_pass http://Backend;
    }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  selector:
    matchLabels:
      app: hello
      tier: frontend
      track: stable
  replicas: 1
  template:
    metadata:
      labels:
        app: hello
        tier: frontend
        track: stable
    spec:
      containers:
        - name: nginx
          image: "nginx:1.27.3"
#          image: "gcr.io/google-samples/hello-frontend:1.0"
          lifecycle:
            preStop:
              exec:
                command: ["/usr/sbin/nginx","-s","quit"]
          volumeMounts:
          - name: "nginx-config"
            mountPath: "/etc/nginx/default/frontend.conf"
            subPath: "nginx.conf"
          - name: logs-folder
            mountPath: "/var/log/nginx"
      restartPolicy: Always
      volumes:
        - name: "nginx-config"
          configMap:
            name: "nginxconf"
        - name: logs-folder
          hostPath:
            path: /vagrant/nginxlogs
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  selector:
    app: hello
    tier: frontend
  ports:
  - protocol: "TCP"
    port: 80
    targetPort: 80
#  type: LoadBalancer
  type: NodePort
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: test-ingress
spec:
  defaultBackend:
    service:
      name: frontend
      port:
        number: 80

#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: minimal-ingress
#  annotations:
##    nginx.ingress.kubernetes.io/rewrite-target: /
#spec:
#  ingressClassName: nginx-example
#  rules:
#  - http:
#      paths:
#      - path: /
#        pathType: Prefix
#        backend:
#          service:
#            name: frontend
#            port:
#              number: 80
